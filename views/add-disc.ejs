<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Disc</title>
    <link rel="stylesheet" href="/css/bootstrap.min.css">
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://cdn.jsdelivr.net/npm/@sindresorhus/color-average"></script>
</head>

<body>
    <%- include('partials/header', { title: 'Add Disc' , user: user }) %>

        <div class="container mt-3">
            <h1>Add New Disc</h1>


            <style>
                #cameraContainer {
                    position: relative;
                    width: 300px;
                    /* Square dimensions */
                    height: 300px;
                    /* Square dimensions */
                    margin: auto;
                    overflow: hidden;

                }

                #cameraFeed {
                    width: 100%;
                    height: 100%;
                    display: block;
                    object-fit: cover;
                }

                #overlay {
                    position: absolute;
                    top: 0;
                    left: 0;
                    width: 100%;
                    /* Full width of the container */
                    height: 100%;
                    /* Full height of the container */
                    border-radius: 50%;
                    border: 2px solid red;
                    box-sizing: border-box;
                    pointer-events: none;
                }

                #toggleCamera {
                    display: flex;
                    margin: auto;
                }

                #capturePhoto {
                    display: flex;
                    margin: auto;
                }
            </style>






            <form action="/add-disc" method="POST" enctype="multipart/form-data">
                <div class="mb-3">
                    <label for="manufacturer" class="form-label">Manufacturer</label>
                    <input type="text" class="form-control" id="manufacturer" name="manufacturer" required>
                </div>
                <div id="manufacturerList"></div>
                <style>
                    .suggestion {
                        padding: 5px;
                        cursor: pointer;
                    }

                    .suggestion:hover {
                        background-color: #f0f0f0;
                    }
                </style>
                <script>
                    document.getElementById('manufacturer').addEventListener('input', function () {
                        const input = this.value;
                        if (input.length > 1) {  // Start searching after one character
                            fetch(`/api/manufacturers?search=${input}`)
                                .then(response => response.json())
                                .then(data => {
                                    const list = document.getElementById('manufacturerList');
                                    list.innerHTML = '';  // Clear previous suggestions
                                    data.forEach(item => {
                                        const div = document.createElement('div');
                                        div.textContent = item;
                                        div.className = 'suggestion';
                                        div.addEventListener('click', function () {
                                            document.getElementById('manufacturer').value = this.textContent;
                                            list.innerHTML = '';  // Clear suggestions after selection
                                        });
                                        list.appendChild(div);
                                    });
                                });
                        }
                    });
                </script>
                <div class="mb-3">
                    <label for="name" class="form-label">Disc Name</label>
                    <input type="text" class="form-control" id="name" name="name" required>
                </div>
                <div class="mb-3">
                    <label for="weight" class="form-label">Weight (grams)</label>
                    <input type="text" class="form-control" id="weight" name="weight" pattern="[0-9]*" required>
                </div>
                <div class=" mb-3">
                    <label for="plastic_type" class="form-label">Plastic/Model</label>
                    <input type="text" class="form-control" id="plastic_type" name="plastic_type" required>
                </div>
                <div class=" mb-3">
                    <label for="range_type" class="form-label">Range Type</label>
                    <select class="form-control" id="range_type" name="range_type">
                        <option value="Approach">Approach</option>
                        <option value="Putter">Putter</option>
                        <option value="Mid-Range">Mid-Range</option>
                        <option value="Distance Driver">Distance Driver</option>
                    </select>
                </div>

                <div class="mb-3">
                    <label for="speed">Speed (<span id="speedValue">1</span>)</label>
                    <input type="range" class="form-range" id="speed" name="speed" min="1" max="14" value="1"
                        oninput="updateSliderValue(this.id, this.value)">
                </div>
                <div class="mb-3">
                    <label for="glide">Glide (<span id="glideValue">1</span>)</label>
                    <input type="range" class="form-range" id="glide" name="glide" min="1" max="7" value="1"
                        oninput="updateSliderValue(this.id, this.value)">
                </div>
                <div class="mb-3">
                    <label for="turn">Turn (<span id="turnValue">-1</span>)</label>
                    <input type="range" class="form-range" id="turn" name="turn" min="-5" max="1" value="-1"
                        oninput="updateSliderValue(this.id, this.value)">
                </div>
                <div class="mb-3">
                    <label for="fade">Fade (<span id="fadeValue">0</span>)</label>
                    <input type="range" class="form-range" id="fade" name="fade" min="0" max="5" value="0"
                        oninput="updateSliderValue(this.id, this.value)">
                </div>
                <div class="mb-3">
                    <label for="stability">Stability</label>
                    <select class="form-control" id="stability" name="stability">
                        <option value="Under-Stable">Under-Stable</option>
                        <option value="Stable">Stable</option>
                        <option value="Over-Stable">Over-Stable</option>
                    </select>
                </div>
                <script>
                    document.addEventListener('DOMContentLoaded', function () {
                        const turnInput = document.getElementById('turn');
                        const fadeInput = document.getElementById('fade');
                        const stabilitySelect = document.getElementById('stability');

                        function updateStability() {
                            const turn = parseInt(turnInput.value, 10);
                            const fade = parseInt(fadeInput.value, 10);
                            const stability = turn + fade;

                            if (stability < 0) {
                                stabilitySelect.value = 'Under-Stable';
                            } else if (stability > 0) {
                                stabilitySelect.value = 'Over-Stable';
                            } else {
                                stabilitySelect.value = 'Stable';
                            }
                        }

                        // Call updateStability whenever the 'turn' or 'fade' value changes
                        turnInput.addEventListener('input', updateStability);
                        fadeInput.addEventListener('input', updateStability);

                        // Initialize stability on page load
                        updateStability();
                    });
                </script>

                <div class="mb-3">
                    <label for="color" class="form-label">Color</label>
                    <select id="color" class="form-control" id="color" name="color">
                        <option value="">Select a Color</option>
                        <option value="#ff0000" style="background-color: #ff0000;">Red</option>
                        <option value="#ffa500" style="background-color: #ffa500;">Orange</option>
                        <option value="#ffff00" style="background-color: #ffff00;">Yellow</option>
                        <option value="#008000" style="background-color: #008000;">Green</option>
                        <option value="#0000ff" style="background-color: #0000ff;">Blue</option>
                        <option value="#4b0082" style="background-color: #4b0082;">Purple</option>
                        <option value="#ee82ee" style="background-color: #ee82ee;">Pink</option>
                        <option value="#000000" style="background-color: #000000;">Black</option>
                        <option value="#ffffff" style="background-color: #ffffff;">White</option>
                    </select>
                </div>

                <div class="mb-3" style="display: none;">
                    <label for="discImage" class="form-label">Disc Image</label>
                    <input type="file" class="form-control" id="discImage" name="discImage" onchange="previewImage();">
                </div>
                <button id="toggleCamera" type="button" class="btn btn-primary" return false;>Toggle Camera</button>
                <div id="cameraContainer" style="display: none;">
                    <video id="cameraFeed" playsinline></video>
                    <div id="overlay"></div>
                </div>
                <button id="capturePhoto" type="button" class="btn btn-success" style="display: none;" return
                    false;>Capture
                    Photo</button>
                <canvas id="canvas" style="display: none;"></canvas>

                <div class="mb-3" id="imagePreview">
                    <img src="" alt="Image Preview" id="imagePreviewSrc" style="max-width: 100%;">
                </div>
                <button type="submit" class="btn btn-success">Add Disc</button>
            </form>
        </div>

        <script>
            function updateSliderValue(id, value) {
                document.getElementById(id + 'Value').innerText = value;
            }
            function previewImage() {
                const file = document.getElementById('discImage').files[0];
                const reader = new FileReader();
                reader.onload = function (e) {
                    const imgElement = document.createElement('img');
                    imgElement.src = e.target.result;
                    imgElement.onload = function () {
                        const canvas = document.createElement('canvas');
                        const context = canvas.getContext('2d');
                        canvas.width = imgElement.width;
                        canvas.height = imgElement.height;
                        context.drawImage(imgElement, 0, 0, canvas.width, canvas.height);
                        const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
                        const color = colorAverage(imageData.data);
                        document.getElementById('color').value = color;
                        document.getElementById('imagePreviewSrc').src = e.target.result; // Update the image preview
                    };
                };
                reader.readAsDataURL(file);
            }

            function colorAverage(data) {
                let r = 0, g = 0, b = 0, count = 0;
                for (let i = 0; i < data.length; i += 4) {
                    r += data[i];
                    g += data[i + 1];
                    b += data[i + 2];
                    count++;
                }
                r = Math.floor(r / count);
                g = Math.floor(g / count);
                b = Math.floor(b / count);

                // Define predefined colors
                const colors = [
                    { name: 'Red', r: 255, g: 0, b: 0 },
                    { name: 'Orange', r: 255, g: 165, b: 0 },
                    { name: 'Yellow', r: 255, g: 255, b: 0 },
                    { name: 'Green', r: 0, g: 128, b: 0 },
                    { name: 'Blue', r: 0, g: 0, b: 255 },
                    { name: 'Indigo', r: 75, g: 0, b: 130 },
                    { name: 'Violet', r: 238, g: 130, b: 238 },
                    { name: 'Black', r: 0, g: 0, b: 0 },
                    { name: 'White', r: 255, g: 255, b: 255 }
                    // Add more predefined colors and shades as needed
                ];

                // Find the nearest predefined color
                let minDistance = Infinity;
                let nearestColor = null;
                for (const color of colors) {
                    const distance = Math.sqrt(
                        Math.pow(color.r - r, 2) +
                        Math.pow(color.g - g, 2) +
                        Math.pow(color.b - b, 2)
                    );
                    if (distance < minDistance) {
                        minDistance = distance;
                        nearestColor = color;
                    }
                }

                // Return the hexadecimal representation of the nearest color
                if (nearestColor) {
                    return `#${nearestColor.r.toString(16).padStart(2, '0')}${nearestColor.g.toString(16).padStart(2, '0')}${nearestColor.b.toString(16).padStart(2, '0')}`;
                } else {
                    // Default color if no nearest color found
                    return '#000000'; // Black
                }
            }

        </script>

        <%- include('partials/footer') %>
</body>
<script>
    const cameraButton = document.getElementById('toggleCamera');
    const captureButton = document.getElementById('capturePhoto');
    const video = document.getElementById('cameraFeed');
    const canvas = document.getElementById('canvas');
    const context = canvas.getContext('2d');
    const photoPreview = document.getElementById('imagePreviewSrc');
    let stream = null;

    cameraButton.onclick = () => {
        if (!stream) {
            navigator.mediaDevices.getUserMedia({ video: { facingMode: "environment" } })
                .then(function (mediaStream) {
                    stream = mediaStream;
                    video.srcObject = stream;
                    video.play();
                    document.getElementById('cameraContainer').style.display = 'block';
                    document.getElementById('capturePhoto').style.display = 'block';
                }).catch(function (error) {
                    console.error("Error accessing the camera: ", error);
                    alert("Error accessing the camera: " + error.message);
                });
        } else {
            video.pause();
            stream.getTracks().forEach(track => track.stop());
            stream = null;
            document.getElementById('cameraContainer').style.display = 'none';
            document.getElementById('capturePhoto').style.display = 'none';
        }
    };

    captureButton.onclick = () => {
        if (stream) {
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            context.drawImage(video, 0, 0, canvas.width, canvas.height);
            canvas.toBlob(blob => {
                const file = new File([blob], 'captured-image.png', { type: 'image/png' });
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(file);
                document.getElementById('discImage').files = dataTransfer.files;
                photoPreview.src = URL.createObjectURL(blob);
                const img = new Image();
                img.onload = function (e) {
                    const canvas = document.createElement('canvas');
                    const ctx = canvas.getContext('2d');
                    canvas.width = img.width;
                    canvas.height = img.height;
                    ctx.drawImage(img, 0, 0);
                    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
                    const color = colorAverage(imageData.data);
                    document.getElementById('color').value = color;

                };
                img.src = URL.createObjectURL(blob);
            }, 'image/png');

            cameraButton.click(); // Close the camera after capturing the photo
        }
    };


</script>

</html>